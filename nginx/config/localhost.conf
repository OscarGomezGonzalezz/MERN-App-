events {}

http {
    upstream keycloak { #These define the services that NGINX will forward requests to.
        server keycloak:8080; #keycloak runs by default in 8080
    }
    upstream react-service {#These define the services that NGINX will forward requests to.
    server react-service:3000;
    }

    upstream node-service {
    server node-service:3500;
    }

    server {#HTTP SERVER
        listen 80 default_server;
        server_name localhost;
        return 301 https://localhost:443$request_uri; #forwards http request to https
    }

    server {#HTTPS SERVER
        listen 443 ssl;
        server_name localhost;
        ssl_certificate     /etc/nginx/ssl/localhost/localhost.crt;
        ssl_certificate_key /etc/nginx/ssl/localhost/localhost.key;

        location / {
            proxy_pass http://react-service; #forward to http again, once we are in the private network(our server)
        }
        location /sockjs-node {#make possible sockets to connect our server
        proxy_pass http://react-service;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        }
        location /api {
            rewrite /api/(.*) /$1 break;#when in frontend we fetch "api/auth/register", nginx transfroms the req to "auth/register", 
                                        #which is the route defined in backend
            proxy_pass http://node-service;
    }
    }
    server {
        listen 8443 ssl;
        server_name localhost;
        ssl_certificate     /etc/nginx/ssl/localhost/localhost.crt;
        ssl_certificate_key /etc/nginx/ssl/localhost/localhost.key;

        # Aquí podrías redirigir o manejar otro servicio; por ejemplo, el login de keycloak
        location / {
            proxy_pass http://keycloak; 
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

}